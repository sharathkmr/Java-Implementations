package com.boot.app.mongo.model;

import org.bson.types.ObjectId;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.mapping.Field;

import lombok.Data;
import lombok.Getter;
import lombok.Setter;
import lombok.AccessLevel;

/*

Lombok @Data bundles the features of  @ToString, @EqualsAndHashCode, @Getter / @Setter and @RequiredArgsConstructor together
i.e @Data generates getters, setters, ToString, EqualsAndHashCode for you with single @Data annotation

all getters and setters generated by @Data are public 
to override the access level provide the @Getter and @Setter with the AccessLevel on the variable

AccessLevel.NONE
Legal access levels are PUBLIC, PROTECTED, PACKAGE, and PRIVATE.
AccessLevel.PUBLIC
AccessLevel.PROTECTED
AccessLevel.PACKAGE
AccessLevel.PRIVATE

@Getter(AccessLevel.NONE)
@Setter(AccessLevel.NONE)
private int id

 */

@Document(collection = "Employees")
@Data
public class Employee {
	
	@Id
	private ObjectId _id;
	
	@Field(value="id")
	private Long id;
	
	@Field(value="name")
	private String name;
	
	@Field(value="age")
	private int age;
	
	@Field(value="years")
	private int years;
	
	public Employee() {}
	
	public Employee(String name, int age, int years) {
		this.name = name;
		this.age = age;
		this.years = years;
	}
	

	public Employee(Long id, String name, int age, int years) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.years = years;
	}

	public ObjectId get_id() {
		return _id;
	}

	public void set_id(ObjectId _id) {
		this._id = _id;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public int getYears() {
		return years;
	}

	public void setYears(int years) {
		this.years = years;
	}

	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", age=" + age + ", years=" + years + "]";
	}
		
}
